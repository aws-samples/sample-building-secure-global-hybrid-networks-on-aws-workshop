AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS Cloud WAN Inspection Architecture - Region 2 resources
Transform: 'AWS::LanguageExtensions'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Parameters
        Parameters:
          - InstanceType
          - InstanceDiskSize
          - LatestAmiId

Parameters:
  InstanceType:
    Description: >- 
      EC2 instance type for the workload instance. Default is set to t2.micro
    Default: t2.micro
    Type: String
    ConstraintDescription: Should be a valid EC2 instance type
  InstanceDiskSize:
    Description: EC2 instance disk size in GB. Default is set to 8GB
    Default: 8
    AllowedValues: [8]
    Type: Number
    ConstraintDescription: Should be a valid instance size in GB  
  LatestAmiId:
    Description: Latest EC2 AMI from Systems Manager Parameter Store
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"
    ConstraintDescription: Must be a valid EC2 AMI from Systems Manager
  OnPremLatestAmiId:
    Description: Latest EC2 AMI from Systems Manager Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  AmazonLinux2AMI:
    Description: AMI for Misc Instances (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
# ---------- Lambda Role ----------
  IamRoleLambdaCFn:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "* is required in this use case."
          - id: W11
            reason: "* is required in this use case."
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Provides permissions for Lambda functions.
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NetworkManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'networkmanager:ListCoreNetworks'
                  - 'networkmanager:GetCoreNetwork'
                Resource: '*'
        - PolicyName: NetworkFirewallAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'network-firewall:DescribeFirewall'
                Resource: '*'
        - PolicyName: LambdaUpdateAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:GetFunctionConfiguration'
                  - 'lambda:UpdateFunctionConfiguration'
                Resource: 'arn:aws:lambda:us-east-2:*:function:*'
  # ---------- End of Lambda Role ----------

# ---------- Lambda and Custom Resource to retrieve Core Network ID and ARN ----------
  # Retrieve AWS Cloud WAN Core Network ID using Lambda and Custom Resource:
  # CloudWatch Log Group for DescribeCoreNetworkLambda Function:
  DescribeCoreNetworkLambdaLogGroup:
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_158"
            comment: "Ensure that CloudWatch Log Group is encrypted by KMS"
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CloudWatch Log Group does not require KMS encryption"
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/eu-central-1-DescribeCoreNetwork"
      RetentionInDays: 1

  # Lambda Function to retrieve AWS Cloud WAN Core Network ID and ARN:
  DescribeCoreNetworkLambda:
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_117"
            comment: "Ensure that AWS Lambda function is configured inside a VPC"
          - id: "CKV_AWS_116"
            comment: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
          - id: "CKV_AWS_115"
            comment: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda function does not need to be deployed in a VPC"
          - id: W92
            reason: "Lambda function does not need ReservedConcurrentExecutions"
    Type: AWS::Lambda::Function
    DependsOn: DescribeCoreNetworkLambdaLogGroup
    Properties:
      Description: Lambda stack to core network and retrieve core network ID.
      FunctionName: DescribeCoreNetworkLambda-eu-central-1
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaCFn.Arn
      Runtime: python3.12
      LoggingConfig:
        LogGroup: !Ref DescribeCoreNetworkLambdaLogGroup 
      Timeout: 900 
      Code:
        ZipFile: |
          import boto3          
          import cfnresponse
          import json
          import logging

          def handler(event, context):
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            
            responseData = {}
            responseStatus = cfnresponse.FAILED

            if event["RequestType"] == "Delete":
              responseStatus = cfnresponse.SUCCESS
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
            if event["RequestType"] == "Create":
              try:
                print(f"Retrieving core network ID:")
                nm_client = boto3.client('networkmanager', region_name='us-east-2')
                core_network = nm_client.list_core_networks()
                core_network_id = core_network['CoreNetworks'][0]['CoreNetworkId']
                core_network_arn = core_network['CoreNetworks'][0]['CoreNetworkArn']
                
                responseData['CoreNetworkId']=core_network_id
                responseData['CoreNetworkArn']=core_network_arn
                responseStatus = cfnresponse.SUCCESS
              except Exception as e:
                logger.info(f"Failed to retrieve the core network id, failure: {e}")
                responseStatus = cfnresponse.FAILED
              
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
  
  # Custom resource to retrieve AWS Cloud WAN Core Network ID using Lambda function created above:
  RetrieveCoreNetworkIdAndArn:
    Type: Custom::RetrieveCoreNetworkIdAndARN
    Properties: 
      ServiceToken: !GetAtt DescribeCoreNetworkLambda.Arn
      ServiceTimeout: 900
  
  # ---------- End of DescribeCoreNetworkLambda ----------

# ---------- Prod VPC 2 Resources ----------
  # ---------- Prod VPC 2 ----------
  ProdVPC2:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "VPC Flow logs not used in workshop"
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.128.0.0/16
      Tags: 
        - Key: Name
          Value: "prod-vpc2-eu-central-1"
  
  # ---------- Prod VPC 2 Subnets ----------
  # CWAN Subnets:
  ProdVPC2CWANSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ProdVPC2
      CidrBlock: 10.128.0.0/28
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "prod-vpc2-cwan-subnet1-eu-central-1"

  ProdVPC2CWANSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProdVPC2
      CidrBlock: 10.128.0.16/28
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "prod-vpc2-cwan-subnet2-eu-central-1"  
  
  # Endpoint Subnets:
  ProdVPC2EndpointSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProdVPC2
      CidrBlock: 10.128.0.32/28
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "prod-vpc2-endpoint-subnet1-eu-central-1"

  ProdVPC2EndpointSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProdVPC2
      CidrBlock: 10.128.0.48/28
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "prod-vpc2-endpoint-subnet2-eu-central-1"  

  # Workload Subnets:
  ProdVPC2WorkloadSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProdVPC2
      CidrBlock: 10.128.1.0/24
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "prod-vpc2-workload-subnet1-eu-central-1"

  ProdVPC2WorkloadSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProdVPC2
      CidrBlock: 10.128.2.0/24
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "prod-vpc2-workload-subnet2-eu-central-1"

  # ---------- Prod VPC 2 Route Tables and Subnet Associations ----------
  # CWAN Route Tables:
  ProdVPC2CWANRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProdVPC2
      Tags:
        - Key: Name
          Value: "prod-vpc2-cwan-rtb1-eu-central-1"
  
  ProdVPC2CWANRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProdVPC2
      Tags:
        - Key: Name
          Value: "prod-vpc2-cwan-rtb2-eu-central-1"  

  # CWAN Route Tables Subnet Associations:
  ProdVPC2CWANRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdVPC2CWANRTB1
      SubnetId: !Ref ProdVPC2CWANSubnet1
  
  ProdVPC2CWANRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdVPC2CWANRTB2
      SubnetId: !Ref ProdVPC2CWANSubnet2  

  # Endpoint Route Tables:
  ProdVPC2EndpointRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProdVPC2
      Tags:
        - Key: Name
          Value: "prod-vpc2-endpoint-rtb1-eu-central-1"
  
  ProdVPC2EndpointRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProdVPC2
      Tags:
        - Key: Name
          Value: "prod-vpc2-endpoint-rtb2-eu-central-1"  

  # Endpoint Route Tables Subnet Associations:
  ProdVPC2EndpointRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdVPC2EndpointRTB1
      SubnetId: !Ref ProdVPC2EndpointSubnet1
  
  ProdVPC2EndpointRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdVPC2EndpointRTB2
      SubnetId: !Ref ProdVPC2EndpointSubnet2

  # Workload Route Tables:  
  ProdVPC2WorkloadRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProdVPC2
      Tags:
        - Key: Name
          Value: "prod-vpc2-workload-rtb1-eu-central-1"
  
  ProdVPC2WorkloadRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProdVPC2
      Tags:
        - Key: Name
          Value: "prod-vpc2-workload-rtb2-eu-central-1"
  
  # Workload Route Tables Subnet Associations:
  ProdVPC2WorkloadRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdVPC2WorkloadRTB1
      SubnetId: !Ref ProdVPC2WorkloadSubnet1
  
  ProdVPC2WorkloadRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdVPC2WorkloadRTB2
      SubnetId: !Ref ProdVPC2WorkloadSubnet2

  # ---------- AWS Cloud WAN attachment and default route----------
  # Create Prod VPC 2 Cloud WAN Attachment:
  ProdVPC2CWANAttachment:
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !GetAtt RetrieveCoreNetworkIdAndArn.CoreNetworkId
      VpcArn: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${ProdVPC2}"
      SubnetArns:
        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${ProdVPC2CWANSubnet1}"
        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${ProdVPC2CWANSubnet2}"
      Tags:
        - Key: Name
          Value: "prod-vpc2-attachment-eu-central-1"
        - Key: domain
          Value: Production

  # Create default route in Workload route tables with Core Network ARN has the next hop:
  ProdVPC2WorkloadRTB1DefaultRoute:
    DependsOn:
      - ProdVPC2CWANAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProdVPC2WorkloadRTB1
      DestinationCidrBlock: 0.0.0.0/0
      CoreNetworkArn: !GetAtt RetrieveCoreNetworkIdAndArn.CoreNetworkArn

  ProdVPC2WorkloadRTB2DefaultRoute:
    DependsOn: [ProdVPC2CWANAttachment]
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProdVPC2WorkloadRTB2
      DestinationCidrBlock: 0.0.0.0/0
      CoreNetworkArn: !GetAtt RetrieveCoreNetworkIdAndArn.CoreNetworkArn

  # ---------- Create Security Groups ----------
  # Create Workload SG:
  ProdVPC2WorkloadSecurityGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "Security Groups egress with an IpProtocol of -1 is required"
          - id: W5
            reason: "Security Groups found with cidr open to world on egress is required"
          - id: W42
            reason: "Security Groups ingress with an ipProtocol of -1 is required"
          - id: W9
            reason: "Security Groups found with ingress cidr that is not /32 is required"
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Prod VPC 2 Workload EC2 Instance Security Group
      VpcId: !Ref ProdVPC2
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/8
          Description: Allowing inbound connection from 10.0.0.0/8 CIDR.
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
        - CidrIp: 172.20.0.0/16
          Description: Allowing inbound connection from 172.20.0.0/16 CIDR.
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1             
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allowing outbound connection to 0.0.0.0/0 CIDR.
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1

  # Create EC2 instance connect endpoint SG:
  ProdVPC2EndpointSecurityGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "Security Groups egress with an IpProtocol of -1 is required"
          - id: W5
            reason: "Security Groups found with cidr open to world on egress is required"
          - id: W42
            reason: "Security Groups ingress with an ipProtocol of -1 is required"
          - id: W9
            reason: "Security Groups found with ingress cidr that is not /32 is required"
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Prod VPC 2 Endpoint Security Group
      VpcId: !Ref ProdVPC2

  ProdVPC2WorkloadSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ProdVPC2WorkloadSecurityGroup
      Description: Allowing inbound connenciton from EC2 Instance Connect (EIC).
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref ProdVPC2EndpointSecurityGroup
  
  ProdVPC2EndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ProdVPC2EndpointSecurityGroup
      Description: Allowing outbound connection to EC2 Instance Connect (EIC).
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref ProdVPC2WorkloadSecurityGroup

  # ---------- EC2 Instance Connect Endpoint ----------
  ProdVPC2EICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds: 
        - !Ref ProdVPC2EndpointSecurityGroup
      SubnetId: !Ref ProdVPC2EndpointSubnet1
      Tags: 
        - Key: Name
          Value: "prod-vpc2-eic-eu-central-1"

  # ---------- Create Worload EC2 Intances ----------
  # Workoad Instance 1:
  ProdVPC2WorkloadInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType      
      SubnetId: !Ref ProdVPC2WorkloadSubnet1
      SecurityGroupIds:
        - !Ref ProdVPC2WorkloadSecurityGroup
      Tags:
        - Key: Name
          Value: "PROD - Private Internal API"
      UserData:
        Fn::Base64: |
          cat <<EOF >> /home/ec2-user/usedatascript.sh
          #!/bin/bash -ex
          
          # Install packages:
          sudo yum update -y;
          sudo yum install jq -y;
          sudo yum install httpd -y;
          sudo yum install htop -y;

          # Enable and start httpd
          sudo systemctl enable httpd;
          sudo systemctl start httpd;

          # Configure hostname:
          sudo hostnamectl set-hostname prod-vpc2-workload-${AvailabilityZone};
          
          # Configure SSH client alive interval for ssh session timeout:
          echo 'ClientAliveInterval 60' | sudo tee --append /etc/ssh/sshd_config;
          service sshd restart;
          
          # Set dark background for vim:
          touch /home/ec2-user/.vimrc;
          echo "set background=dark" >> /home/ec2-user/.vimrc;

          # Define variables:
          curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document > /home/ec2-user/iid;
          export instance_interface=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/);
          export instance_vpcid=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$instance_interface/vpc-id);
          export instance_az=$(cat /home/ec2-user/iid |grep 'availability' | awk -F': ' '{print $2}' | awk -F',' '{print $1}');
          export instance_ip=$(cat /home/ec2-user/iid |grep 'privateIp' | awk -F': ' '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print$2}');
          export instance_region=$(cat /home/ec2-user/iid |grep 'region' | awk -F': ' '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print$2}');
          EOT

          # Add index.html
          touch /var/www/html/index.html;
          cat <<EOT >> /var/www/html/index.html
          <html>
            <head>
              <title>Prod VPC 2 Workload Instance 1</title>
              <meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'>
            </head>
            <body>
              <h1>Welcome to AWS Cloud WAN Inspection Architecture POC:</h1>
              <h2>This is a simple web server running in $instance_az in $instance_region. Happy Testing!</h2>
            </body>
          </html>
          EOT

  # Workoad Instance 2:
  ProdVPC2WorkloadInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType      
      SubnetId: !Ref ProdVPC2WorkloadSubnet2
      SecurityGroupIds:
        - !Ref ProdVPC2WorkloadSecurityGroup
      Tags:
        - Key: Name
          Value: "PROD - Customer Database"
      UserData:
        Fn::Base64: |
          cat <<EOF >> /home/ec2-user/usedatascript.sh
          #!/bin/bash -ex
          
          # Install packages:
          sudo yum update -y;
          sudo yum install jq -y;
          sudo yum install httpd -y;
          sudo yum install htop -y;

          # Enable and start httpd
          sudo systemctl enable httpd;
          sudo systemctl start httpd;

          # Configure hostname:
          sudo hostnamectl set-hostname prod-vpc2-workload-${AvailabilityZone};
          
          # Configure SSH client alive interval for ssh session timeout:
          echo 'ClientAliveInterval 60' | sudo tee --append /etc/ssh/sshd_config;
          service sshd restart;
          
          # Set dark background for vim:
          touch /home/ec2-user/.vimrc;
          echo "set background=dark" >> /home/ec2-user/.vimrc;

          # Define variables:
          curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document > /home/ec2-user/iid;
          export instance_interface=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/);
          export instance_vpcid=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$instance_interface/vpc-id);
          export instance_az=$(cat /home/ec2-user/iid |grep 'availability' | awk -F': ' '{print $2}' | awk -F',' '{print $1}');
          export instance_ip=$(cat /home/ec2-user/iid |grep 'privateIp' | awk -F': ' '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print$2}');
          export instance_region=$(cat /home/ec2-user/iid |grep 'region' | awk -F': ' '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print$2}');
          EOT

          # Add index.html
          touch /var/www/html/index.html;
          cat <<EOT >> /var/www/html/index.html
          <html>
            <head>
              <title>Prod VPC 2 Workload Instance 2</title>
              <meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'>
            </head>
            <body>
              <h1>Welcome to AWS Cloud WAN Inspection Architecture POC:</h1>
              <h2>This is a simple web server running in $instance_az in $instance_region. Happy Testing!</h2>
            </body>
          </html>
          EOT
  
  # ---------- End of Prod VPC 2 Resources ----------

  # ---------- Dev VPC 2 Resources ----------
  # ---------- Dev VPC 2 ----------
  DevVPC2:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "VPC Flow logs not used in workshop"
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.160.0.0/16
      Tags: 
        - Key: Name
          Value: "dev-vpc2-eu-central-1"
  
  # ---------- Dev VPC 2 IGW and IGW Attachment ----------
  DevVPC2IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name
          Value: "dev-vpc2-igw-eu-central-1"

  DevVPC2IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref DevVPC2IGW
      VpcId: !Ref DevVPC2
  
  # ---------- Dev VPC 2 Subnets ----------
  # CWAN Subnets:
  DevVPC2CWANSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: DevVPC2
      CidrBlock: 10.160.0.0/28
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "dev-vpc2-cwan-subnet1-eu-central-1"

  DevVPC2CWANSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DevVPC2
      CidrBlock: 10.160.0.16/28
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "dev-vpc2-cwan-subnet2-eu-central-1"  
  
  # Endpoint Subnets:
  DevVPC2EndpointSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DevVPC2
      CidrBlock: 10.160.0.32/28
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "dev-vpc2-endpoint-subnet1-eu-central-1"

  DevVPC2EndpointSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DevVPC2
      CidrBlock: 10.160.0.48/28
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "dev-vpc2-endpoint-subnet2-eu-central-1"  

  # Workload Subnets:
  DevVPC2WorkloadSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DevVPC2
      CidrBlock: 10.160.1.0/24
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "dev-vpc2-workload-subnet1-eu-central-1"

  DevVPC2WorkloadSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DevVPC2
      CidrBlock: 10.160.2.0/24
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "dev-vpc2-workload-subnet2-eu-central-1"

  # Public Subnets:
  DevVPC2PublicSubnet1:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: "Public Subnet, public IPs required"
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DevVPC2
      CidrBlock: 10.160.3.0/24
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "dev-vpc2-public-subnet1-eu-central-1"

  DevVPC2PublicSubnet2:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: "Public Subnet, public IPs required"
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DevVPC2
      CidrBlock: 10.160.4.0/24
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "dev-vpc2-public-subnet2-eu-central-1"

  # ---------- Dev VPC 2 Route Tables and Subnet Associations ----------
  # CWAN Route Tables:
  DevVPC2CWANRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DevVPC2
      Tags:
        - Key: Name
          Value: "dev-vpc2-cwan-rtb1-eu-central-1"
  
  DevVPC2CWANRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DevVPC2
      Tags:
        - Key: Name
          Value: "dev-vpc2-cwan-rtb2-eu-central-1"  

  # CWAN Route Tables Subnet Associations:
  DevVPC2CWANRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DevVPC2CWANRTB1
      SubnetId: !Ref DevVPC2CWANSubnet1
  
  DevVPC2CWANRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DevVPC2CWANRTB2
      SubnetId: !Ref DevVPC2CWANSubnet2  

  # Endpoint Route Tables:
  DevVPC2EndpointRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DevVPC2
      Tags:
        - Key: Name
          Value: "dev-vpc2-endpoint-rtb1-eu-central-1"
  
  DevVPC2EndpointRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DevVPC2
      Tags:
        - Key: Name
          Value: "dev-vpc2-endpoint-rtb2-eu-central-1"  

  # Endpoint Route Tables Subnet Associations:
  DevVPC2EndpointRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DevVPC2EndpointRTB1
      SubnetId: !Ref DevVPC2EndpointSubnet1
  
  DevVPC2EndpointRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DevVPC2EndpointRTB2
      SubnetId: !Ref DevVPC2EndpointSubnet2

  # Workload Route Tables:  
  DevVPC2WorkloadRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DevVPC2
      Tags:
        - Key: Name
          Value: "dev-vpc2-workload-rtb1-eu-central-1"
  
  DevVPC2WorkloadRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DevVPC2
      Tags:
        - Key: Name
          Value: "dev-vpc2-workload-rtb2-eu-central-1"
  
  # Workload Route Tables Subnet Associations:
  DevVPC2WorkloadRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DevVPC2WorkloadRTB1
      SubnetId: !Ref DevVPC2WorkloadSubnet1
  
  DevVPC2WorkloadRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DevVPC2WorkloadRTB2
      SubnetId: !Ref DevVPC2WorkloadSubnet2

  # Public Route Tables:
  DevVPC2PublicRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DevVPC2
      Tags:
        - Key: Name
          Value: "dev-vpc2-public-rtb1-eu-central-1"

  DevVPC2PublicRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DevVPC2
      Tags:
        - Key: Name
          Value: "dev-vpc2-public-rtb2-eu-central-1"

  # Public Route Tables Subnet Associations:
  DevVPC2PublicRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DevVPC2PublicRTB1
      SubnetId: !Ref DevVPC2PublicSubnet1

  DevVPC2PublicRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DevVPC2PublicRTB2
      SubnetId: !Ref DevVPC2PublicSubnet2

  # ---------- Dev VPC 2 NAT Gateways and EIPs ----------
  # NAT Gateway 1:
  DevVPC2NATGW1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  DevVPC2NATGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt DevVPC2NATGW1EIP.AllocationId
      SubnetId: !Ref DevVPC2PublicSubnet1
      Tags:
        - Key: Name
          Value: "dev-vpc2-natgw1-eu-central-1"

  # ---------- AWS Cloud WAN attachment and routes ----------
  # Create Dev VPC 2 Cloud WAN Attachment:
  DevVPC2CWANAttachment:
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !GetAtt RetrieveCoreNetworkIdAndArn.CoreNetworkId
      VpcArn: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${DevVPC2}"
      SubnetArns:
        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${DevVPC2CWANSubnet1}"
        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${DevVPC2CWANSubnet2}"
      Tags:
        - Key: Name
          Value: "dev-vpc2-attachment-eu-central-1"
        - Key: domain
          Value: Development

  # Default route to NAT Gateway for internet access
  DevVPC2WorkloadRTB1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DevVPC2WorkloadRTB1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref DevVPC2NATGW1

  DevVPC2WorkloadRTB2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DevVPC2WorkloadRTB2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref DevVPC2NATGW1
  
  # Routes for 10.0.0.0/8 via Cloud WAN
  DevVPC2WorkloadRTB1CloudWANRoute:
    DependsOn: DevVPC2CWANAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DevVPC2WorkloadRTB1
      DestinationCidrBlock: 10.0.0.0/8
      CoreNetworkArn: !GetAtt RetrieveCoreNetworkIdAndArn.CoreNetworkArn

  DevVPC2WorkloadRTB2CloudWANRoute:
    DependsOn: DevVPC2CWANAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DevVPC2WorkloadRTB2
      DestinationCidrBlock: 10.0.0.0/8
      CoreNetworkArn: !GetAtt RetrieveCoreNetworkIdAndArn.CoreNetworkArn

  # Default routes to IGW in public subnets
  DevVPC2PublicRTB1DefaultRoute:
    DependsOn: DevVPC2IGWAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DevVPC2PublicRTB1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DevVPC2IGW

  DevVPC2PublicRTB2DefaultRoute:
    DependsOn: DevVPC2IGWAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DevVPC2PublicRTB2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DevVPC2IGW

  # ---------- Create Security Groups ----------
  # Create Workload SG:
  DevVPC2WorkloadSecurityGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "Security Groups egress with an IpProtocol of -1 is required"
          - id: W5
            reason: "Security Groups found with cidr open to world on egress is required"
          - id: W42
            reason: "Security Groups ingress with an ipProtocol of -1 is required"
          - id: W9
            reason: "Security Groups found with ingress cidr that is not /32 is required"
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Dev VPC 2 Workload EC2 Instance Security Group
      VpcId: !Ref DevVPC2
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/8
          Description: Allowing inbound connection from 10.0.0.0/8 CIDR.
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1             
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allowing outbound connection to 0.0.0.0/0 CIDR.
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: "dev-vpc-workload-sg-eu-central-1"

  # Create EC2 instance connect endpoint SG:
  DevVPC2EndpointSecurityGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "Security Groups egress with an IpProtocol of -1 is required"
          - id: W5
            reason: "Security Groups found with cidr open to world on egress is required"
          - id: W42
            reason: "Security Groups ingress with an ipProtocol of -1 is required"
          - id: W9
            reason: "Security Groups found with ingress cidr that is not /32 is required"
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Dev VPC 2 Endpoint Security Group
      VpcId: !Ref DevVPC2
      Tags:
        - Key: Name
          Value: "dev-vpc-endpoint-sg-eu-central-1"

  DevVPC2WorkloadSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DevVPC2WorkloadSecurityGroup
      Description: Allowing inbound connenciton from EC2 Instance Connect (EIC).
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref DevVPC2EndpointSecurityGroup
  
  DevVPC2EndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref DevVPC2EndpointSecurityGroup
      Description: Allowing outbound connection to EC2 Instance Connect (EIC).
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref DevVPC2WorkloadSecurityGroup

  # ---------- EC2 Instance Connect Endpoint ----------
  DevVPC2EICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds: 
        - !Ref DevVPC2EndpointSecurityGroup
      SubnetId: !Ref DevVPC2EndpointSubnet1
      Tags: 
        - Key: Name
          Value: "dev-vpc2-eic-eu-central-1"

  # ---------- Create Workload EC2 Instances ----------
  # Workload Instance 1:
  DevVPC2WorkloadInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType      
      SubnetId: !Ref DevVPC2WorkloadSubnet1
      SecurityGroupIds:
        - !Ref DevVPC2WorkloadSecurityGroup
      Tags:
        - Key: Name
          Value: "DEV - Test Instance"
      UserData:
        Fn::Base64: |
          cat <<EOF >> /home/ec2-user/usedatascript.sh
          #!/bin/bash -ex
          
          # Install packages:
          sudo yum update -y;
          sudo yum install jq -y;
          sudo yum install httpd -y;
          sudo yum install htop -y;

          # Enable and start httpd
          sudo systemctl enable httpd;
          sudo systemctl start httpd;

          # Configure hostname:
          sudo hostnamectl set-hostname dev-vpc2-workload-${AvailabilityZone};
          
          # Configure SSH client alive interval for ssh session timeout:
          echo 'ClientAliveInterval 60' | sudo tee --append /etc/ssh/sshd_config;
          service sshd restart;
          
          # Set dark background for vim:
          touch /home/ec2-user/.vimrc;
          echo "set background=dark" >> /home/ec2-user/.vimrc;

          # Define variables:
          curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document > /home/ec2-user/iid;
          export instance_interface=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/);
          export instance_vpcid=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$instance_interface/vpc-id);
          export instance_az=$(cat /home/ec2-user/iid |grep 'availability' | awk -F': ' '{print $2}' | awk -F',' '{print $1}');
          export instance_ip=$(cat /home/ec2-user/iid |grep 'privateIp' | awk -F': ' '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print$2}');
          export instance_region=$(cat /home/ec2-user/iid |grep 'region' | awk -F': ' '{print $2}' | awk -F',' '{print $1}' | awk -F'"' '{print$2}');
          EOT

          # Add index.html
          touch /var/www/html/index.html;
          cat <<EOT >> /var/www/html/index.html
          <html>
            <head>
              <title>Dev VPC 2 Workload Instance 1</title>
              <meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'>
            </head>
            <body>
              <h1>Welcome to AWS Cloud WAN Inspection Architecture POC:</h1>
              <h2>This is a simple web server running in $instance_az in $instance_region. Happy Testing!</h2>
            </body>
          </html>
          EOT
  
  # ---------- End of Dev VPC 2 Resources ----------

# ---------- Inspection VPC 2 Resources ----------
  # ---------- Inspection VPC 2 ----------
  InspectionVPC2:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "VPC Flow logs not used in workshop"
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 100.64.2.0/24
      Tags: 
        - Key: Name
          Value: "inspection-vpc2--eu-central-1"

  # ---------- Inspection VPC 2 IGW and IGW Attachment----------
  InspectionVPC2IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name
          Value: "inspection-vpc2-igw-eu-central-1"
  
  InspectionVPC2IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InspectionVPC2IGW
      VpcId: !Ref InspectionVPC2
  
  # ---------- Inspection VPC 2 Subnets ----------
  # CWAN Subnets:
  InspectionVPC2CWANSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC2
      CidrBlock: 100.64.2.0/28
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "inspection-vpc2-cwan-subnet1-eu-central-1"

  InspectionVPC2CWANSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC2
      CidrBlock: 100.64.2.16/28
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "inspection-vpc2-cwan-subnet2-eu-central-1"  
  
  # Firewall Endpoint Subnets:
  InspectionVPC2FirewallSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC2
      CidrBlock: 100.64.2.32/28
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "inspection-vpc2-fwe-subnet1-eu-central-1"

  InspectionVPC2FirewallSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC2
      CidrBlock: 100.64.2.48/28
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "inspection-vpc2-fwe-subnet2-eu-central-1"  

  # Public Subnets:
  InspectionVPC2PublicSubnet1:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: "Public Subnet, public IPs required"
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC2
      CidrBlock: 100.64.2.64/28
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "inspection-vpc2-public-subnet1-eu-central-1"

  InspectionVPC2PublicSubnet2:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: "Public Subnet, public IPs required"
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC2
      CidrBlock: 100.64.2.80/28
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "inspection-vpc2-public-subnet2-eu-central-1"

  # ---------- Inspection VPC 2 Route Tables and Subnet Associations ----------
  # CWAN Route Tables:
  InspectionVPC2CWANRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC2
      Tags:
        - Key: Name
          Value: "inspection-vpc2-cwan-rtb1-eu-central-1"
  
  InspectionVPC2CWANRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC2
      Tags:
        - Key: Name
          Value: "inspection-vpc2-cwan-rtb2-eu-central-1"  

  # CWAN Route Tables Subnet Associations:
  InspectionVPC2CWANRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionVPC2CWANRTB1
      SubnetId: !Ref InspectionVPC2CWANSubnet1
  
  InspectionVPC2CWANRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionVPC2CWANRTB2
      SubnetId: !Ref InspectionVPC2CWANSubnet2  

  # Firewall Endpoint Route Tables:
  InspectionVPC2FirewallRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC2
      Tags:
        - Key: Name
          Value: "inspection-vpc2-fwe-rtb1-eu-central-1"
  
  InspectionVPC2FirewallRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC2
      Tags:
        - Key: Name
          Value: "inspection-vpc2-fwe-rtb2-eu-central-1"  

  # Firewall Endpoint Route Tables Subnet Associations:
  InspectionVPC2FirewallRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionVPC2FirewallRTB1
      SubnetId: !Ref InspectionVPC2FirewallSubnet1
  
  InspectionVPC2FirewallRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionVPC2FirewallRTB2
      SubnetId: !Ref InspectionVPC2FirewallSubnet2

  # Public Route Tables:  
  InspectionVPC2PublicRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC2
      Tags:
        - Key: Name
          Value: "inspection-vpc2-public-rtb1-eu-central-1"
  
  InspectionVPC2PublicRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC2
      Tags:
        - Key: Name
          Value: "inspection-vpc2-public-rtb2-eu-central-1"
  
  # Public Route Tables Subnet Associations:
  InspectionVPC2PublicRTB1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionVPC2PublicRTB1
      SubnetId: !Ref InspectionVPC2PublicSubnet1
  
  InspectionVPC2PublicRTB2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionVPC2PublicRTB2
      SubnetId: !Ref InspectionVPC2PublicSubnet2

  # ---------- Inspection VPC 2 NAT Gateways and EIPs ----------
  # NAT Gateway 1:
  InspectionVPC2NATGW1EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  InspectionVPC2NATGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt InspectionVPC2NATGW1EIP1.AllocationId
      SubnetId: !Ref InspectionVPC2PublicSubnet1
      Tags:
        - Key: Name
          Value: "inspection-vpc2-natgw1-eu-central-1"

  # NAT Gateway 2:
  InspectionVPC2NATGW1EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  InspectionVPC2NATGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt InspectionVPC2NATGW1EIP2.AllocationId
      SubnetId: !Ref InspectionVPC2PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "inspection-vpc-natgw2-eu-central-1"

  # ---------- AWS Network Firewall (ANFW) and related resources ----------
  # Network Firewall resource
  InspectionVPC2Anfw1:
    Type: AWS::NetworkFirewall::Firewall
    DependsOn: [InspectionVPC2Anfw1RulesPolicy1]
    Properties:
      FirewallName: Network-Firewall-eu-central-1
      FirewallPolicyArn: !GetAtt InspectionVPC2Anfw1RulesPolicy1.FirewallPolicyArn
      EnabledAnalysisTypes: 
        - TLS_SNI
        - HTTP_HOST
      VpcId: !Ref InspectionVPC2
      SubnetMappings:
        - SubnetId: !Ref InspectionVPC2FirewallSubnet1
        - SubnetId: !Ref InspectionVPC2FirewallSubnet2
  
  # Firewall Policy
  InspectionVPC2Anfw1RulesPolicy1:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicy:
        StatelessDefaultActions:
          - aws:forward_to_sfe
        StatelessFragmentDefaultActions:
          - aws:forward_to_sfe
        StatefulEngineOptions:
          RuleOrder: STRICT_ORDER
        StatefulDefaultActions:
          - aws:alert_established
        StatefulRuleGroupReferences:
          # Custom Suricata Rule Group
          - ResourceArn: !Ref StatefulRuleGroup
            Priority: 1          
      FirewallPolicyName: "Network-Firewall-Policy-eu-central-1"
      Tags:
        - Key: Name
          Value: "Network-Firewall-Policy-eu-central-1"

  StatefulRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: StatefulRuleGroup
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        RuleVariables: 
          IPSets: 
            DEV_CIDR: 
              Definition: 
                - "10.32.0.0/16"
                - "10.160.0.0/16"
            INSPECTION_VPC: 
              Definition: 
                - "100.64.1.0/24"
                - "100.64.2.0/24"
            ON_PREM_CIDR: 
              Definition: 
                - "172.20.0.0/16"
            PROD_CIDR: 
              Definition: 
                - "10.0.0.0/16"
                - "10.128.0.0/16"
            PROD_DB: 
              Definition: 
                - "10.0.2.50"
            SANITIZED_PROD_DB: 
              Definition: 
                - "10.0.2.55"
            PROD_INTERNAL_API: 
              Definition: 
                - "10.0.1.100"
        RulesSource:
          RulesString: >-
            # Insert firewall rules 

        StatefulRuleOptions:
          RuleOrder: STRICT_ORDER   

  # Firewall Logs - Flow
  InspectionVPC2Anfw1LogFlowGroup:
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_158"
            comment: "Ensure that CloudWatch Log Group is encrypted by KMS"
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CloudWatch Log Group does not require KMS encryption"
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/network-firewall/flow-logs/eu-central-1/"
      RetentionInDays: 7

  # Firewall Logs - Aler
  InspectionVPC2Anfw1LogAlertGroup:
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_158"
            comment: "Ensure that CloudWatch Log Group is encrypted by KMS"
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CloudWatch Log Group does not require KMS encryption"
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/network-firewall/alert-logs/eu-central-1/"
      RetentionInDays: 7

  # Firewall Log - Policy reference
  InspectionVPC2Anfw1Log:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref InspectionVPC2Anfw1
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogType: FLOW
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref InspectionVPC2Anfw1LogFlowGroup
          - LogType: ALERT
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref InspectionVPC2Anfw1LogAlertGroup

  # ---------- Lambda and Custom Resource to retrieve ANFW Endpoint IDs ----------
  # CloudWatch Log Group for DescribeVpceIdLambda Function:
  DescribeVpceIdLambdaLogGroup:
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_158"
            comment: "Ensure that CloudWatch Log Group is encrypted by KMS"
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CloudWatch Log Group does not require KMS encryption"
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/eu-central-1-DescribeVpceId"
      RetentionInDays: 1
  
  # Lambda Function to retrieve ANFW Endpoint IDs:
  DescribeVpceIdLambda:
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_117"
            comment: "Ensure that AWS Lambda function is configured inside a VPC"
          - id: "CKV_AWS_116"
            comment: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
          - id: "CKV_AWS_115"
            comment: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda function does not need to be deployed in a VPC"
          - id: W92
            reason: "Lambda function does not need ReservedConcurrentExecutions"
    Type: AWS::Lambda::Function
    DependsOn: DescribeVpceIdLambdaLogGroup
    Properties:
      Handler: "index.handler"
      FunctionName: DescribeVpceId-eu-central-1
      Role: !GetAtt IamRoleLambdaCFn.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging

          def handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)

              responseData = {}
              responseStatus = cfnresponse.FAILED

              eventinfo = json.dumps(event)
              logger.info(f"Received event: {eventinfo}")

              if event["RequestType"] == "Delete":
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
              if event["RequestType"] == "Create":
                  try:
                      Az1 = event["ResourceProperties"]["Az1"]
                      Az2 = event["ResourceProperties"]["Az2"]
                      FwArn = event["ResourceProperties"]["FwArn"]
                  except Exception as e:
                      logger.info(f"AZ retrieval failure: {e}")

                  try:
                      nfw = boto3.client('network-firewall')
                  except Exception as e:
                      logger.info(f"boto3.client failure: {e}")

                  try:
                      NfwResponse=nfw.describe_firewall(FirewallArn=FwArn)
                      VpceId1 = NfwResponse['FirewallStatus']['SyncStates'][Az1]['Attachment']['EndpointId']
                      VpceId2 = NfwResponse['FirewallStatus']['SyncStates'][Az2]['Attachment']['EndpointId']
                  except Exception as e:
                      logger.info(f"ec2.describe_firewall failure: {e}")

                  responseData['FwVpceId1'] = VpceId1
                  responseData['FwVpceId2'] = VpceId2
                  responseStatus = cfnresponse.SUCCESS
                  print(f"VPCE ID1: {VpceId1}")
                  print(f"VPCE ID2: {VpceId2}")
                  print(f"response data: {responseData}")
                  cfnresponse.send(event, context, responseStatus, responseData)
      Runtime: python3.12
      Timeout: 900
      LoggingConfig:
        LogGroup: !Ref DescribeVpceIdLambdaLogGroup 

  # Custom resource to retrieve ANFW Endpoint IDs using Lambda function created above:
  RetrieveInspectionVPC2AnfwVpceIds:
    Type: Custom::DescribeVpcEndpoints
    Properties:
      ServiceToken: !GetAtt DescribeVpceIdLambda.Arn
      Az1: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      Az2: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      FwArn: !Ref InspectionVPC2Anfw1

  # ---------- Lambda and Custom Resource to update ONPREM_INSTANCE_ID ----------
  # CloudWatch Log Group for UpdateOnPremInstanceIdLambda Function:
  UpdateOnPremInstanceIdLambdaLogGroup:
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_158"
            comment: "Ensure that CloudWatch Log Group is encrypted by KMS"
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CloudWatch Log Group does not require KMS encryption"
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/eu-central-1-UpdateOnPremInstanceId"
      RetentionInDays: 1

  # Lambda Function to update ONPREM_INSTANCE_ID in region1 Lambda functions:
  UpdateOnPremInstanceIdLambda:
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_117"
            comment: "Ensure that AWS Lambda function is configured inside a VPC"
          - id: "CKV_AWS_116"
            comment: "Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)"
          - id: "CKV_AWS_115"
            comment: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda function does not need to be deployed in a VPC"
          - id: W92
            reason: "Lambda function does not need ReservedConcurrentExecutions"
    Type: AWS::Lambda::Function
    DependsOn: UpdateOnPremInstanceIdLambdaLogGroup
    Properties:
      Description: Lambda function to update ONPREM_INSTANCE_ID in region1 Lambda functions
      FunctionName: UpdateOnPremInstanceIdLambda-eu-central-1
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaCFn.Arn
      Runtime: python3.12
      LoggingConfig:
        LogGroup: !Ref UpdateOnPremInstanceIdLambdaLogGroup
      Timeout: 900
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging

          def handler(event, context):
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            
            responseData = {}
            responseStatus = cfnresponse.FAILED

            if event["RequestType"] == "Delete":
              responseStatus = cfnresponse.SUCCESS
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
            if event["RequestType"] == "Create":
              try:
                # Get the ONPREMSERVER1 instance ID
                onprem_instance_id = event['ResourceProperties']['OnPremInstanceId']
                logger.info(f"Retrieved OnPremInstanceId: {onprem_instance_id}")

                # Create Lambda client for us-east-2 region
                lambda_client = boto3.client('lambda', region_name='us-east-2')

                # List of Lambda functions to update
                functions_to_update = [
                  'DEV-To-PROD',
                  'OnPrem-To-PROD',
                  'Egress-Tests'
                ]

                # Update each function's environment variables
                for function_name in functions_to_update:
                  try:
                    # Get current function configuration
                    function_config = lambda_client.get_function_configuration(
                      FunctionName=function_name
                    )
                    
                    # Update environment variables
                    env_vars = function_config['Environment']['Variables']
                    env_vars['ONPREM_INSTANCE_ID'] = onprem_instance_id
                    
                    # Update function configuration
                    lambda_client.update_function_configuration(
                      FunctionName=function_name,
                      Environment={
                        'Variables': env_vars
                      }
                    )
                    logger.info(f"Successfully updated {function_name}")
                  except Exception as e:
                    logger.error(f"Error updating {function_name}: {str(e)}")
                    raise e

                responseStatus = cfnresponse.SUCCESS
                responseData['Status'] = "Successfully updated Lambda functions"
              except Exception as e:
                logger.error(f"Failed to update Lambda functions: {str(e)}")
                responseStatus = cfnresponse.FAILED
                responseData['Error'] = str(e)
              
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")

  # Custom resource to update ONPREM_INSTANCE_ID using Lambda function created above:
  UpdateOnPremInstanceId:
    Type: Custom::UpdateOnPremInstanceId
    DependsOn: ONPREMSERVER1
    Properties:
      ServiceToken: !GetAtt UpdateOnPremInstanceIdLambda.Arn
      ServiceTimeout: 900
      OnPremInstanceId: !Ref ONPREMSERVER1

  # ---------- End of UpdateOnPremInstanceIdLambda ----------

  # ---------- AWS Cloud WAN attachment ----------
  # Create Inspection VPC 2 Cloud WAN Attachment:
  InspectionVPC2CWANAttachment:
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !GetAtt RetrieveCoreNetworkIdAndArn.CoreNetworkId
      VpcArn: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${InspectionVPC2}"
      SubnetArns:
        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${InspectionVPC2CWANSubnet1}"
        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${InspectionVPC2CWANSubnet2}"
      Options:
        ApplianceModeSupport: true
      Tags:
        - Key: Name
          Value: "inspection-vpc2-attachment-eu-central-1"
        - Key: domain
          Value: InspectionNFG

  # ---------- Add Routes ----------
  # Create default route in CWAN route tables with ANFW endpoints as the next hop:
  InspectionVPC2CWANRTB1DefaultRoute:
    DependsOn: [InspectionVPC2Anfw1]
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2CWANRTB1
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId: !GetAtt RetrieveInspectionVPC2AnfwVpceIds.FwVpceId1

  InspectionVPC2CWANRTB2DefaultRoute:
    DependsOn: [InspectionVPC2Anfw1]
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2CWANRTB2
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId: !GetAtt RetrieveInspectionVPC2AnfwVpceIds.FwVpceId2

  # Create default route in ANFW route tables with NAT Gateway as the next hop:
  InspectionVPC2FirewallRTB1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2FirewallRTB1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref InspectionVPC2NATGW1

  InspectionVPC2FirewallRTB2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2FirewallRTB2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref InspectionVPC2NATGW2

  # Create summary route in ANFW route tables with Core Network ARN as the next hop:
  InspectionVPC2FirewallRTB1SummaryRoute:
    DependsOn: [InspectionVPC2CWANAttachment]
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2FirewallRTB1
      DestinationCidrBlock: 10.0.0.0/8
      CoreNetworkArn: !GetAtt RetrieveCoreNetworkIdAndArn.CoreNetworkArn

  InspectionVPC2FirewallRTB2SummaryRoute:
    DependsOn: [InspectionVPC2CWANAttachment]
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2FirewallRTB2
      DestinationCidrBlock: 10.0.0.0/8
      CoreNetworkArn: !GetAtt RetrieveCoreNetworkIdAndArn.CoreNetworkArn

  # Create default route in Public route tables with Internet Gateway as the next hop:
  InspectionVPC2PublicRTB1DefaultRoute:
    DependsOn: [InspectionVPC2IGWAttachment]
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2PublicRTB1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InspectionVPC2IGW

  InspectionVPC2PublicRTB2DefaultRoute:
    DependsOn: [InspectionVPC2IGWAttachment]
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2PublicRTB2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InspectionVPC2IGW

  # Create summary route in Public route tables with firewall endpoint as the next hop:
  InspectionVPC2PublicRTB1SummaryRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2PublicRTB1
      DestinationCidrBlock: 10.0.0.0/8
      VpcEndpointId: !GetAtt RetrieveInspectionVPC2AnfwVpceIds.FwVpceId1

  InspectionVPC2PublicRTB2SummaryRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionVPC2PublicRTB2
      DestinationCidrBlock: 10.0.0.0/8
      VpcEndpointId: !GetAtt RetrieveInspectionVPC2AnfwVpceIds.FwVpceId2
  
  # ---------- End of Inspection VPC 2 Resources ----------

###############################################################################
###    On-premises Infrastructure
###############################################################################

###############################################################################
###   VPC - On-premises
###############################################################################
  ONPREMVPC:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "VPC Flow logs not used in workshop"
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.20.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: On-premises

###############################################################################
###   Internet Gateway and NATGW - On-premises
###############################################################################            
  ONPREMInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: On-premises-igw
  ONPREMInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref ONPREMVPC
      InternetGatewayId: !Ref ONPREMInternetGateway

  ONPREMNATGWEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ONPREMNATGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ONPREMNATGWEIP.AllocationId
      SubnetId: !Ref ONPREMPub
      Tags:
        - Key: Name
          Value: On-premises-natgw
  
###############################################################################
###   Subnets - CgwVpc - On-premises
###############################################################################
  ONPREMPub:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: "Public Subnet, public IPs required"
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref ONPREMVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.20.1.0/24
      Tags:
        - Key: Name
          Value: On-premises-public-subnet
  ONPREMPriv1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ONPREMVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.20.2.0/24
      Tags:
        - Key: Name
          Value: On-premises-private-subnet


###############################################################################
###   Routing Table 
###############################################################################
  ONPREMPrivateRT1: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ONPREMVPC
      Tags:
      - Key: Name
        Value: On-premises-private-rtb
  
  ONPREMPublicRT: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ONPREMVPC
      Tags:
      - Key: Name
        Value: On-premises-public-rtb
  
  ONPREMRouteDefaultIPV4Pub: 
    Type: 'AWS::EC2::Route'
    DependsOn: ONPREMInternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: ONPREMPublicRT
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: ONPREMInternetGateway
  
  ONPREMRouteToVPN:
    Type: 'AWS::EC2::Route'
    DependsOn: ONPREMRouter1
    Properties:
      RouteTableId: !Ref ONPREMPrivateRT1
      DestinationCidrBlock: '10.0.0.0/8'
      InstanceId: !Ref ONPREMRouter1
  
  ONPREMRouteToNATGW:
    Type: 'AWS::EC2::Route'
    DependsOn: ONPREMNATGW
    Properties:
      RouteTableId: !Ref ONPREMPrivateRT1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref ONPREMNATGW
  
  ONPREMRTOnPremPriv1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ONPREMPriv1
      RouteTableId:
        Ref: ONPREMPrivateRT1
  
  ONPREMRTOnPremPub:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ONPREMPub
      RouteTableId:
        Ref: ONPREMPublicRT

###############################################################################
###   Security Group for Public Instance (CGW)
###############################################################################
  ONPREMInstanceSG:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "Security Groups egress with an IpProtocol of -1 is required"
          - id: W5
            reason: "Security Groups found with cidr open to world on egress is required"
          - id: W42
            reason: "Security Groups ingress with an ipProtocol of -1 is required"
          - id: W9
            reason: "Security Groups found with ingress cidr that is not /32 is required"
          - id: W2
            reason: "Open ingress port required"  
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref ONPREMVPC
      GroupDescription: Default on-premises SG
      SecurityGroupIngress: 
        - Description: 'Allow All from AWS Environment'
          IpProtocol: '-1'
          CidrIp: '10.0.0.0/16'
        - Description: 'Allow All from BranchOffice Environment'
          IpProtocol: '-1'
          CidrIp: '172.20.0.0/16'        
        - Description: 'Allow VPN tunnel UDP port 500'
          IpProtocol: udp
          FromPort: '500'
          ToPort: '500'
          CidrIp: "0.0.0.0/0"
        - Description: 'Allow VPN tunnel UDP port 4500'
          IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          CidrIp: "0.0.0.0/0"
        - Description: Allow All from CGW CIDR
          IpProtocol:  "-1"
          CidrIp: 172.20.0.0/16
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allowing outbound connection to 0.0.0.0/0 CIDR.
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1

###############################################################################
###   Security Group for Private Instance (App)
###############################################################################
  ONPREMSERVERSG:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "Security Groups egress with an IpProtocol of -1 is required"
          - id: W5
            reason: "Security Groups found with cidr open to world on egress is required"
          - id: W42
            reason: "Security Groups ingress with an ipProtocol of -1 is required"
          - id: W9
            reason: "Security Groups found with ingress cidr that is not /32 is required"
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Private Instance 
      VpcId: !Ref ONPREMVPC
      SecurityGroupIngress:
      - Description: Allow traffic from On-Prem network
        IpProtocol:  "-1"
        CidrIp: 172.20.0.0/16
      - Description: Allow HTTP from Production
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.0.0.0/8
      - Description: Allow HTTPS from Production
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/8
      - Description: Allow MySQL from Production
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 10.0.0.0/8
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allowing outbound connection to 0.0.0.0/0 CIDR.
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1


###############################################################################
###   Security Group for VPC Endpoint 
###############################################################################
  ONPREMVpceSG:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "Security Groups egress with an IpProtocol of -1 is required"
          - id: W5
            reason: "Security Groups found with cidr open to world on egress is required"
          - id: W42
            reason: "Security Groups ingress with an ipProtocol of -1 is required"
          - id: W9
            reason: "Security Groups found with ingress cidr that is not /32 is required"
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for VPC Endpoint
      VpcId: !Ref ONPREMVPC
      SecurityGroupIngress:
      - Description: Allow HTTPS from On-Prem network
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
        CidrIp: 172.20.0.0/16
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allowing outbound connection to 0.0.0.0/0 CIDR.
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1


###############################################################################
###   EC2 Instances - 
###############################################################################
#
# EC2 Instance - CGW Router
#
  ONPREMRouter1:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ONPREMssmVPCe
      - ONPREMssmec2messagesVPCe
      - ONPREMssmmessagesVPCe
    Properties:
      InstanceType: "t3.medium"
      SecurityGroupIds: 
      - Ref: ONPREMInstanceSG
      SubnetId:
        Ref: ONPREMPub
      ImageId: !Ref AmazonLinux2AMI
      IamInstanceProfile: !Ref ONPREMEC2InstanceProfile
      SourceDestCheck: false
      PrivateIpAddress: !Join
        - '.'
        -
          - !Select [ 0, !Split [ '.', !GetAtt ONPREMVPC.CidrBlock]]
          - !Select [ 1, !Split [ '.', !GetAtt ONPREMVPC.CidrBlock]]
          - '1'
          - '11'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: On-premises-CGW
      UserData:
        Fn::Base64: |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras install -y epel
            sudo yum install strongswan -y
            sudo yum install quagga-0.99.22.4 -y
            
            # Create the VPN setup script
            cat > /home/ec2-user/cgwsetup.sh << 'EOF'
            #!/bin/bash
            # CGW(EC2 Instance) Eth0
            pCgwEth0Ip=$(hostname -i)
            pCgwEip=$(curl -s ifconfig.me)
            pCgwCidr="$(echo $pCgwEth0Ip | cut -d "." -f 1-2).0.0/16"

            # IPSec Tunnel #1 Info
            pTu1CgwOutsideIp=$pCgwEip
            pTu1CgwInsideIp=169.254.11.2
            pTu1VgwInsideIp=169.254.11.1

            # IPSec Tunnel #2 Info
            pTu2CgwOutsideIp=$pCgwEip
            pTu2CgwInsideIp=169.254.12.2
            pTu2VgwInsideIp=169.254.12.1

            #BGP ASN and PSK Info
            pVgwAsn=64521
            pCgwAsn=65016
            pTuPsk=strongswan_awsvpn

            echo "=============================================================="
            echo " Let's begin to set up IPSEC/BGP using StrongSWAN and Quagga  "
            echo "--------------------------------------------------------------"
            echo "  0. strongswan and quagga has been installed " 
            echo "----------------------------------------------------------"
            echo "  1. IPSec Info - Input VPN Tunnel Outside IP addresses "
            read -p "    - Tunnel #1 Outside IP Addr : " pTu1VgwOutsideIp
            read -p "    - Tunnel #2 Outside IP Addr : " pTu2VgwOutsideIp
            echo "----------------------------------------------------------"
            echo "  2. BGP Info -  ASN numbers are set as below"
            echo "    - CNE ASN Number (64512-65534) : $pVgwAsn " 
            echo "    - CGW ASN Number (64512-65534) : $pCgwAsn " 
            echo "=========================================================="
            read -p "  informations above is correct? If yes, please continue (Y/N)? " answer2
            echo

            if [[ "$answer2" != "y" && "$answer2" != "Y" ]]
            then
                exit 100
            fi

            echo "3. Set IPSEC config on /etc/strongswan/ipsec.conf "

            cat << EOF2 | sudo tee /etc/strongswan/ipsec.conf
            conn %default
                    leftauth=psk
                    rightauth=psk
                    ike=aes128-sha1-modp1024!
                    ikelifetime=28800s
                    aggressive=no
                    esp=aes128-sha1-modp1024!
                    lifetime=3600s
                    type=tunnel
                    dpddelay=10s
                    dpdtimeout=30s
                    keyexchange=ikev1
                    rekey=yes
                    reauth=no
                    dpdaction=restart
                    closeaction=restart
                    leftsubnet=0.0.0.0/0,::/0
                    rightsubnet=0.0.0.0/0,::/0
                    leftupdown=/etc/strongswan/ipsec-vti.sh
                    installpolicy=yes
                    compress=no
                    mobike=no
            conn TU1
                    left=$pCgwEth0Ip
                    leftid=$pTu1CgwOutsideIp
                    right=$pTu1VgwOutsideIp
                    rightid=$pTu1VgwOutsideIp
                    auto=start
                    mark=100
            conn TU2
                    left=$pCgwEth0Ip
                    leftid=$pTu2CgwOutsideIp
                    right=$pTu2VgwOutsideIp
                    rightid=$pTu2VgwOutsideIp
                    auto=start
                    mark=200
            EOF2

            echo "4. Set IPSEC config on /etc/strongswan/ipsec.secrets "

            cat << EOF3 | sudo tee /etc/strongswan/ipsec.secrets
            $pTu1CgwOutsideIp $pTu1VgwOutsideIp : PSK $pTuPsk
            $pTu2CgwOutsideIp $pTu2VgwOutsideIp : PSK $pTuPsk
            EOF3

            echo "5. Set IPSEC tunnel options on /etc/strongswan/ipsec-vti.sh "

            cat << 'EOF4' | sudo tee /etc/strongswan/ipsec-vti.sh
            #!/bin/bash
            IP=$(which ip)
            IPTABLES=$(which iptables)

            PLUTO_MARK_OUT_ARR=(${PLUTO_MARK_OUT//// })
            PLUTO_MARK_IN_ARR=(${PLUTO_MARK_IN//// })

            case "$PLUTO_CONNECTION" in
                    TU1)
                    VTI_INTERFACE=vti1
                    VTI_LOCALADDR=169.254.11.2/30
                    VTI_REMOTEADDR=169.254.11.1/30
                    ;;
                    TU2)
                    VTI_INTERFACE=vti2
                    VTI_LOCALADDR=169.254.12.2/30
                    VTI_REMOTEADDR=169.254.12.1/30
                    ;;
            esac

            case "${PLUTO_VERB}" in
                    up-client)
                    $IP link add ${VTI_INTERFACE} type vti local ${PLUTO_ME} remote ${PLUTO_PEER} okey ${PLUTO_MARK_OUT_ARR[0]} ikey ${PLUTO_MARK_IN_ARR[0]}
                    sysctl -w net.ipv4.conf.${VTI_INTERFACE}.disable_policy=1
                    sysctl -w net.ipv4.conf.${VTI_INTERFACE}.rp_filter=2 || sysctl -w net.ipv4.conf.${VTI_INTERFACE}.rp_filter=0
                    $IP addr add ${VTI_LOCALADDR} remote ${VTI_REMOTEADDR} dev ${VTI_INTERFACE}
                    $IP link set ${VTI_INTERFACE} up mtu 1436
                    $IPTABLES -t mangle -I FORWARD -o ${VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
                    $IPTABLES -t mangle -I INPUT -p esp -s ${PLUTO_PEER} -d ${PLUTO_ME} -j MARK --set-xmark ${PLUTO_MARK_IN}
                    $IP route flush table 220
                    ;;
                    down-client)
                    $IP link del ${VTI_INTERFACE}
                    $IPTABLES -t mangle -D FORWARD -o ${VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
                    $IPTABLES -t mangle -D INPUT -p esp -s ${PLUTO_PEER} -d ${PLUTO_ME} -j MARK --set-xmark ${PLUTO_MARK_IN}
                    ;;
            esac

            sysctl -w net.ipv4.ip_forward=1
            sysctl -w net.ipv4.conf.eth0.disable_xfrm=1
            sysctl -w net.ipv4.conf.eth0.disable_policy=1
            sysctl -w net.ipv4.conf.eth0.accept_redirects=0
            sysctl -w net.ipv4.conf.eth0.send_redirects=0
            EOF4

            sudo chmod +x /etc/strongswan/ipsec-vti.sh

            echo "6. Set BGP setting using Quagga /etc/quagga/bgpd.conf "

            cat << EOF5 | sudo tee /etc/quagga/bgpd.conf
            router bgp $pCgwAsn
            bgp router-id $pTu1CgwInsideIp
            neighbor $pTu1VgwInsideIp remote-as $pVgwAsn
            neighbor $pTu2VgwInsideIp remote-as $pVgwAsn
            network $pCgwCidr
            EOF5

            echo "7. Start StrongSWAN and Quagga BGP "

            sudo systemctl enable --now strongswan
            sudo systemctl start zebra
            sudo systemctl enable zebra
            sudo systemctl start bgpd
            sudo systemctl enable bgpd
            sudo chmod -R 777 /etc/quagga/

            sudo strongswan restart

            echo "=========================================================="
            echo " Using below command, verify IPSec Tunnel and BGP Routing tables"
            echo " -. IPsec status    : sudo strongswan statusall  "
            echo " -. Routing tables : sudo ip route  "
            echo " -. BGP detail config : Enter teminal mode > sudo vtysh and then > show ip bgp "
            echo "=========================================================="
            EOF

            chmod +x /home/ec2-user/cgwsetup.sh
            chown ec2-user:ec2-user /home/ec2-user/cgwsetup.sh

# Cgw EIP Association      
  Router1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref ONPREMRouter1
      Tags:
        - Key: Name
          Value: 'OnpremRouter1-Eip'
#
# EC2 Instance - APP Server
#
  ONPREMSERVER1:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ONPREMssmVPCe
      - ONPREMssmec2messagesVPCe
      - ONPREMssmmessagesVPCe
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref OnPremLatestAmiId
      IamInstanceProfile: !Ref ONPREMEC2InstanceProfile
      SubnetId: !Ref ONPREMPriv1
      SecurityGroupIds: 
        - !Ref ONPREMSERVERSG
      PrivateIpAddress: !Join
        - '.'
        -
          - !Select [ 0, !Split [ '.', !GetAtt ONPREMVPC.CidrBlock]]
          - !Select [ 1, !Split [ '.', !GetAtt ONPREMVPC.CidrBlock]]
          - '2'
          - '20'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]      
      Tags:
        - Key: Name
          Value: On-premises-test-instance
      UserData:
        Fn::Base64: |
          #!/bin/bash -ex
          # Update system
          sudo yum update -y

          # Install MySQL Client
          sudo wget https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
          sudo dnf install mysql80-community-release-el9-1.noarch.rpm -y
          sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
          sudo dnf install mysql-community-client -y
          sudo yum install -y nc

          # Install cronie
          sudo dnf install cronie -y

          # Start and enable crond service
          sudo systemctl start crond
          sudo systemctl enable crond

          # Create a script for DNS cache flush
          cat << 'EOF' | sudo tee /usr/local/bin/flush-dns-cache.sh
          #!/bin/bash
          systemctl restart systemd-resolved
          EOF

          # Make the script executable
          sudo chmod +x /usr/local/bin/flush-dns-cache.sh

          # Add cron job to run every minute
          echo "* * * * * root /usr/local/bin/flush-dns-cache.sh" | sudo tee /etc/cron.d/flush-dns-cache

          # Set proper permissions for the cron job file
          sudo chmod 644 /etc/cron.d/flush-dns-cache
  
###############################################################################
###   IAM Role for EC2 SSM  
###############################################################################
  ONPREMEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
  ONPREMEC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ONPREMEC2Role

###############################################################################
###   SSM Session Manager
###############################################################################
  ONPREMssmVPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref ONPREMPub
      SecurityGroupIds:
        - !Ref ONPREMInstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref ONPREMVPC
  ONPREMssmec2messagesVPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref ONPREMPub
      SecurityGroupIds:
        - !Ref ONPREMInstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref ONPREMVPC
  ONPREMssmmessagesVPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref ONPREMPub
      SecurityGroupIds:
        - !Ref ONPREMInstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref ONPREMVPC
  ONPREMs3VPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref ONPREMPublicRT
        - !Ref ONPREMPrivateRT1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref ONPREMVPC


###############################################################################
### Outputs
###############################################################################
# Outputs:
#   Router1Public:
#     Description: Public IP of Router1
#     Value: !GetAtt ONPREMRouter1.PublicIp
#   Router1Private:
#     Description: Private IP of Router1
#     Value: !GetAtt ONPREMRouter1.PrivateIp
#   AppServerPrivate:
#     Description: Private IP of App Server
#     Value: !GetAtt ONPREMSERVER1.PrivateIp  