AWSTemplateFormatVersion: 2010-09-09
Description: Template to deploy all the resources for Building Secure Global Hybrid Networks on AWS workshop (https://catalog.us-east-1.prod.workshops.aws/workshops/cdef9a06-8156-4669-9e6a-6eb83e4a5adc)
Transform: AWS::Serverless-2016-10-31

Resources:
  CloudFormationStackSetExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess

  CloudFormationStackSetAdministrationRole:
    DependsOn:
      - CloudFormationStackSetExecutionRole
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AssumeRole-AWSCloudFormationStackSetExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - "arn:*:iam::*:role/AWSCloudFormationStackSetExecutionRole"

  CoreNetworkStackSet:
    DependsOn:
      - CloudFormationStackSetAdministrationRole
    Type: AWS::CloudFormation::StackSet
    Properties:
      TemplateURL: 'https://ws-assets-prod-iad-r-cmh-8d6e9c21a4dec77d.s3.us-east-2.amazonaws.com/cdef9a06-8156-4669-9e6a-6eb83e4a5adc/core-network.yaml'      
      StackSetName: 'core-network'
      Capabilities:
        - CAPABILITY_AUTO_EXPAND
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref AWS::AccountId
          Regions: 
            - 'us-east-2'

  Region1SolutionStackSet:
    DependsOn:
      - CloudFormationStackSetAdministrationRole
      - CoreNetworkStackSet
    Type: AWS::CloudFormation::StackSet
    Properties:
      TemplateURL: 'https://ws-assets-prod-iad-r-cmh-8d6e9c21a4dec77d.s3.us-east-2.amazonaws.com/cdef9a06-8156-4669-9e6a-6eb83e4a5adc/region1_resources.yaml'      
      StackSetName: 'us-east-2-resources'
      Capabilities:
        - CAPABILITY_AUTO_EXPAND
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref AWS::AccountId
          Regions: 
            - 'us-east-2'

  Region2SolutionStackSet:
    DependsOn:
      - CloudFormationStackSetAdministrationRole
      - CoreNetworkStackSet
    Type: AWS::CloudFormation::StackSet
    Properties:
      TemplateURL: 'https://ws-assets-prod-iad-r-cmh-8d6e9c21a4dec77d.s3.us-east-2.amazonaws.com/cdef9a06-8156-4669-9e6a-6eb83e4a5adc/region2_resources.yaml'      
      StackSetName: 'eu-central-1-resources'
      Capabilities:
        - CAPABILITY_AUTO_EXPAND
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref AWS::AccountId
          Regions: 
            - 'eu-central-1'

  # Lambda function to clean up StackSet instances when the main stack is deleted
  CleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.12
      InlineCode: |
        import boto3
        import cfnresponse
        import time
        import logging

        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        def handler(event, context):
            logger.info('Received event: %s', event)
            
            # Initialize response data
            response_data = {}
            
            try:
                if event['RequestType'] == 'Delete':
                    cfn = boto3.client('cloudformation')
                    account_id = event['ResourceProperties']['AccountId']
                    
                    # Delete stack instances for each StackSet
                    stacksets = ['core-network', 'us-east-2-resources', 'eu-central-1-resources']
                    
                    for stackset in stacksets:
                        logger.info(f"Processing StackSet: {stackset}")
                        
                        # Determine which regions to use for each StackSet
                        if stackset == 'core-network':
                            target_regions = ['us-east-2']
                        elif stackset == 'us-east-2-resources':
                            target_regions = ['us-east-2']
                        elif stackset == 'eu-central-1-resources':
                            target_regions = ['eu-central-1']
                        
                        for region in target_regions:
                            try:
                                # Delete stack instances
                                logger.info(f"Deleting stack instance for {stackset} in {region}")
                                cfn.delete_stack_instances(
                                    StackSetName=stackset,
                                    Accounts=[account_id],
                                    Regions=[region],
                                    RetainStacks=False
                                )
                                
                                # Wait for stack instance deletion to complete
                                max_retries = 30
                                for i in range(max_retries):
                                    try:
                                        response = cfn.list_stack_instances(
                                            StackSetName=stackset,
                                            StackInstanceAccount=account_id,
                                            StackInstanceRegion=region
                                        )
                                        
                                        if not response.get('Summaries'):
                                            logger.info(f"Stack instance for {stackset} in {region} deleted successfully")
                                            break
                                            
                                        logger.info(f"Waiting for stack instance deletion... ({i+1}/{max_retries})")
                                        time.sleep(10)
                                    except Exception as e:
                                        logger.error(f"Error checking stack instance status: {str(e)}")
                                        break
                                        
                            except Exception as e:
                                logger.error(f"Error deleting stack instance for {stackset} in {region}: {str(e)}")
                        
                        # Delete the StackSet after instances are deleted
                        try:
                            logger.info(f"Deleting StackSet: {stackset}")
                            cfn.delete_stack_set(StackSetName=stackset)
                        except Exception as e:
                            logger.error(f"Error deleting StackSet {stackset}: {str(e)}")
                    
                    logger.info("Cleanup completed")
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
            except Exception as e:
                logger.error(f"Error: {str(e)}")
                cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
      Timeout: 900
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DeleteStackInstances'
                - 'cloudformation:DeleteStackSet'
                - 'cloudformation:ListStackInstances'
              Resource: '*'

  # Custom resource to trigger the cleanup function
  StackSetCleanup:
    Type: Custom::StackSetCleanup
    Properties:
      ServiceToken: !GetAtt CleanupFunction.Arn
      AccountId: !Ref AWS::AccountId

